# -*- coding: utf-8 -*-
"""[Recommendation System]Muhammad Daffa Eka Pramudita.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P_nTYm0GvLlCASJmLyEzy1HKRgbMD16n

# Submission 2 - Recommendation System

**Nama : Muhammad Daffa Eka Pramudita**
**<br>Email : mdaffa.ekapram@gmail.com**
**<br>ID Dicoding : dabrut**

# Project Overview

Industri anime Jepang merupakan salah satu sektor hiburan global yang mengalami pertumbuhan pesat, dengan jumlah judul anime yang terus bertambah setiap tahunnya. Platform seperti [MyAnimeList](https://myanimelist.net/) menyediakan katalog besar yang mencakup ribuan judul anime beserta informasi pendukung seperti genre, studio, skor pengguna, dan popularitas. Namun, banyaknya pilihan sering kali membuat pengguna kesulitan menemukan anime yang sesuai dengan preferensi mereka. Oleh karena itu, pengembangan **sistem rekomendasi anime yang efektif** menjadi sangat penting untuk meningkatkan pengalaman pengguna.

Selain itu, pemahaman terhadap **genre yang paling populer** serta **faktor-faktor yang memengaruhi popularitas** dapat memberikan wawasan berharga bagi studio dan produser anime dalam merancang konten yang lebih relevan dengan minat pasar.

### Mengapa Masalah Ini Penting untuk Diselesaikan

- Pengguna membutuhkan bantuan dalam menavigasi ribuan pilihan anime.
- Rekomendasi yang relevan dapat meningkatkan retensi pengguna dan kepuasan menonton.
- Produser dapat menggunakan data genre dan popularitas untuk menyusun strategi produksi konten yang lebih tepat sasaran.

Menurut riset yang dilakukan oleh Kumar et al. (2020), sistem rekomendasi berbasis konten dan kolaboratif telah berhasil meningkatkan kepuasan pengguna pada platform hiburan seperti Netflix dan Spotify [1]. Sistem yang sama dapat diadaptasi untuk platform anime. Selain itu, penelitian dari Ismail et al. (2021) menyatakan bahwa genre, popularitas, dan demografi merupakan fitur penting dalam membangun sistem rekomendasi anime yang akurat [2].

Dengan memanfaatkan data dari MyAnimeList, proyek ini bertujuan untuk:
- Menganalisis genre anime yang paling populer berdasarkan data agregat pengguna.
- Membangun prototipe sistem rekomendasi menggunakan algoritma content-based dan collaborative filtering.

# Business Understanding

### **Problem Statement**

1.   Bagaimana cara membuat sistem rekomendasi anime yang baik dan relevan berdasarkan preferensi pengguna dan karakteristik anime?
2.   Apa genre anime yang paling populer di kalangan pengguna MyAnimeList?

### **Goals**

1.   Mengembangkan sistem rekomendasi anime yang dapat menyarankan anime relevan kepada pengguna berdasarkan minat mereka.
2.   Mengidentifikasi genre anime yang paling populer berdasarkan data seperti popularity rank, jumlah anggota (members), dan jumlah favorit (favorites).

### **Solution Statement**

1.   Menerapkan algoritma sistem rekomendasi seperti Content-Based Filtering yang berdasarkan pada kemiripan fitur anime seperti genre dan demographic
2.   Melakukan analisis eksploratif terhadap data MyAnimeList untuk menghitung dan membandingkan popularitas setiap genre.

# Data Understanding

## Import Library
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import ConfusionMatrixDisplay, accuracy_score, classification_report

"""## Data Loading"""

#!/bin/bash
!curl -L -o anime-database-2022.zip\
  "https://www.kaggle.com/api/v1/datasets/download/harits/anime-database-2022"

!unzip anime-database-2022.zip -d anime-database-2022

df = pd.read_csv('anime-database-2022/Anime.csv')

df.head()

df.info()

"""| Atribut           | Deskripsi                                                                 |
|-------------------|---------------------------------------------------------------------------|
| **ID**            | ID anime di MyAnimeList.net                                               |
| **Title**         | Judul asli dari anime                                                     |
| **Synonyms**      | Nama lain dari anime                                                      |
| **Japanese**      | Judul anime dalam bahasa Jepang                                           |
| **English**       | Judul anime dalam bahasa Inggris                                          |
| **Synopsis**      | Ringkasan cerita anime                                                    |
| **Type**          | Tipe anime (TV, Movie, OVA, dll)                                          |
| **Episodes**      | Jumlah episode dalam anime                                                |
| **Status**        | Status penayangan anime (belum tayang, sedang tayang, sudah selesai)      |
| **Start_Aired**   | Tanggal atau tahun mulai tayang                                           |
| **End_Aired**     | Tanggal atau tahun selesai tayang                                         |
| **Premiered**     | Musim tayang perdana (misalnya: Spring 2023)                              |
| **Broadcast**     | Jadwal siaran anime                                                       |
| **Producers**     | Daftar produser                                                           |
| **Licensors**     | Daftar pemegang lisensi distribusi                                        |
| **Studios**       | Studio yang memproduksi anime                                             |
| **Source**        | Sumber cerita anime (manga, novel, original, dll)                         |
| **Genres**        | Daftar genre anime (aksi, drama, komedi, dll)                             |
| **Themes**        | Tema-tema yang diangkat dalam anime                                       |
| **Demographics**  | Sasaran demografis (shounen, seinen, josei, dll)                          |
| **Duration_Minutes** | Durasi tiap episode (dalam menit)                                      |
| **Rating**        | Kategori usia penonton (PG-13, R, dll)                                    |
| **Score**         | Skor rata-rata dari pengguna MyAnimeList.net                              |
| **Scored_Users**  | Jumlah pengguna yang memberikan skor                                      |
| **Ranked**        | Peringkat berdasarkan skor tertinggi                                      |
| **Popularity**    | Peringkat berdasarkan popularitas (jumlah yang menambahkan ke daftar)     |
| **Members**       | Jumlah pengguna yang menambahkan anime ke daftar mereka                   |
| **Favorites**     | Jumlah pengguna yang menandai anime sebagai favorit                       |

"""

df.describe()

"""## EDA"""

plt.figure(figsize=(10, 5))
sns.histplot(df['Score'].dropna(), bins=30, kde=True)
plt.title("Distribusi Skor Anime")
plt.xlabel("Skor")
plt.ylabel("Jumlah Anime")
plt.show()

from collections import Counter

# Pisahkan genre yang dipisahkan koma
genre_lists = df['Genres'].dropna().apply(lambda x: x.split(', '))
flat_genres = [genre for sublist in genre_lists for genre in sublist]

# Hitung frekuensi
genre_counts = Counter(flat_genres)
genre_df = pd.DataFrame(genre_counts.items(), columns=["Genre", "Count"]).sort_values("Count", ascending=False)

# Visualisasi genre terpopuler
plt.figure(figsize=(12, 6))
sns.barplot(data=genre_df.head(15), x="Count", y="Genre")
plt.title("15 Genre Anime Terpopuler")
plt.xlabel("Jumlah Anime")
plt.ylabel("Genre")
plt.show()

# Hanya data yang punya genre dan skor
df_genre_score = df[['Genres', 'Score']].dropna()

# Ekspansi genre menjadi baris terpisah
genre_scores = df_genre_score.assign(Genres=df_genre_score['Genres'].str.split(', ')).explode('Genres')

# Hitung rata-rata skor per genre
avg_score_per_genre = genre_scores.groupby('Genres')['Score'].mean().sort_values(ascending=False).head(15)

# Visualisasi
plt.figure(figsize=(12, 6))
avg_score_per_genre.plot(kind='barh')
plt.title("Rata-rata Skor per Genre (Top 15)")
plt.xlabel("Rata-rata Skor")
plt.ylabel("Genre")
plt.gca().invert_yaxis()
plt.show()

"""# Data Preparation"""

df.drop(['Synonyms', 'Japanese','Episodes', 'Start_Aired',
         'End_Aired','Premiered', 'Broadcast','Producers', 'Licensors','Source',
         'Themes','Duration_Minutes','Scored_Users',
         'Ranked', 'Members', 'Favorites'],axis=1,inplace=True)

df.columns

df.isnull().sum()

df.duplicated().sum()

# Deteksi Outlier dengan metode IQR
def detect_outliers(data):
    outlier_summary = {}
    for column in data.select_dtypes(include=np.number).columns:
        Q1 = data[column].quantile(0.25)
        Q3 = data[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outliers = data[(data[column] < lower_bound) | (data[column] > upper_bound)]
        outlier_summary[column] = len(outliers)

    return outlier_summary

# Menjalankan fungsi untuk dataset (tanpa kolom target)
indicators_columns = df.drop(columns=['risk_score'], errors='ignore')
outlier_counts = detect_outliers(indicators_columns)

# Menampilkan jumlah outlier per kolom
print("Jumlah outlier per kolom:")
for col, count in outlier_counts.items():
    print(f"{col}: {count}")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

col = 'Score'

# Hitung IQR
Q1 = df[col].quantile(0.25)
Q3 = df[col].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Deteksi outlier
outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

# Tampilkan informasi
print(f"IQR untuk kolom '{col}': {IQR:.2f}")
print(f"Batas bawah: {lower_bound:.2f}")
print(f"Batas atas : {upper_bound:.2f}")
print(f"Jumlah outlier pada kolom '{col}': {len(outliers)}")

# Buat boxplot
plt.figure(figsize=(8, 5))
sns.boxplot(x=df[col])
plt.title(f"Boxplot Kolom '{col}' (Metode IQR)")
plt.xlabel(col)
plt.tight_layout()
plt.show()

"""## Data Cleansing"""

df_clean = df.dropna()

df_clean.isnull().sum()

print(f"Jumlah baris sebelum data cleansing: {df.shape[0]}")
print(f"Jumlah baris sesudah data cleansing: {df_clean.shape[0]}")

df_clean.head(10)

# Gabungkan kolom konten (Genre + Studio + Demographics) menjadi satu string deskriptif
df_clean['Content'] = df_clean['Genres'] + ', ' + df_clean['Demographics'].fillna('')

df_clean.head()

# Normalisasi teks genre (hilangkan null dan lowercase)
df_clean['Content'] = df_clean['Content'].fillna('').str.lower()

df_clean.head()

from sklearn.feature_extraction.text import TfidfVectorizer

# TF-IDF Vectorization pada 'content'
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df_clean['Content'])

# Cek bentuk matriks
print(f"TF-IDF matrix shape: {tfidf_matrix.shape}")

"""# **Modelling**"""

from sklearn.metrics.pairwise import linear_kernel

# Hitung cosine similarity antar anime
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Buat index judul ke index dataframe
indices = pd.Series(df_clean.index, index=df_clean['Title']).drop_duplicates()

# Fungsi sistem rekomendasi
def recommend(Title, num_recommendations=5):
    if Title not in indices:
        return f"Anime '{Title}' tidak ditemukan."

    idx = indices[Title]
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan berdasarkan skor kemiripan
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:num_recommendations+1]  # abaikan diri sendiri

    anime_indices = [i[0] for i in sim_scores]

    # Tampilkan kolom penting
    return df_clean[['Title', 'English', 'Content', 'Synopsis', 'Studios', 'Status', 'Rating', 'Score']].iloc[anime_indices].reset_index(drop=True)

"""## Interpretasi"""

title = "Naruto"
rekomendasi = recommend(title)

print(f"Rekomendasi untuk '{title}':\n")
rekomendasi

title = "Tenki no Ko"
rekomendasi = recommend(title)

print(f"Rekomendasi untuk '{title}':\n")
rekomendasi

"""# **Evaluation**"""

ground_truth = {
    "Naruto": {"Bleach", "One Piece", "Hunter x Hunter (2011)", "Dragon Ball Z", "One Punch Man"},
}

def evaluate_recommendation(title, k=5):
    recommended_df = recommend(title, k)
    if isinstance(recommended_df, str):  # Jika error
        return recommended_df

    recommended_titles = set(recommended_df['Title'])
    true_relevant = ground_truth.get(title, set())

    if not true_relevant:
        return f"Tidak ada ground truth untuk '{title}'"

    relevant_found = recommended_titles.intersection(true_relevant)
    precision = len(relevant_found) / k
    recall = len(relevant_found) / len(true_relevant)

    # Cetak hasil
    print(f"\n🎯 Evaluasi untuk: {title}")
    print("-" * 40)
    print(f"Recommended Titles : {', '.join(recommended_titles)}")
    print(f"Ground Truth       : {', '.join(true_relevant)}")
    print(f"Relevant Found     : {', '.join(relevant_found) if relevant_found else 'None'}")
    print("-" * 40)
    print(f"✅ Precision@{k}     : {precision:.3f}")
    print(f"✅ Recall@{k}        : {recall:.3f}")
    print(f"📌 Found             : {len(relevant_found)} / {len(true_relevant)}")

    return None

evaluate_recommendation("Naruto", k=5)

"""# Menjawab Pertanyaan

## 1. Bagaimana cara membuat sistem rekomendasi anime yang baik dan relevan berdasarkan preferensi pengguna dan karakteristik anime?
"""

# Input dari pengguna
user_input = input("Masukkan judul anime: ")

# Jalankan rekomendasi
recommendations = recommend(user_input, num_recommendations=5)

# Tampilkan hasil
if isinstance(recommendations, str):
    print(recommendations)
else:
    print("\n🎉 Rekomendasi untuk:", user_input)
    display(recommendations)

"""## 2. Apa genre anime yang paling populer di kalangan pengguna MyAnimeList?"""

from collections import Counter

# Pisahkan genre yang dipisahkan koma
genre_lists = df_clean['Genres'].dropna().apply(lambda x: x.split(', '))
flat_genres = [genre for sublist in genre_lists for genre in sublist]

# Hitung frekuensi
genre_counts = Counter(flat_genres)
genre_df = pd.DataFrame(genre_counts.items(), columns=["Genre", "Count"]).sort_values("Count", ascending=False)

# Visualisasi genre terpopuler
plt.figure(figsize=(12, 6))
sns.barplot(data=genre_df.head(15), x="Count", y="Genre")
plt.title("15 Genre Anime Terpopuler")
plt.xlabel("Jumlah Anime")
plt.ylabel("Genre")
plt.show()

"""# Referensi


[1] Kumar, V., Pathak, M., & Choudhury, T. (2020). *A Comparative Study of Recommender Systems in E-commerce*. International Journal of Advanced Computer Science and Applications, 11(2), 517–523. doi:10.14569/IJACSA.2020.0110265

[2] Ismail, M., Siregar, M. R., & Pinem, S. A. (2021). *Anime Recommendation System Based on Genre and Popularity Using Content-Based Filtering*. Journal of Computer Science and Engineering, 25(1), 34–42.
"""